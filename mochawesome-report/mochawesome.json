{
  "stats": {
    "suites": 8,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2023-10-15T12:30:35.622Z",
    "end": "2023-10-15T12:30:47.128Z",
    "duration": 11506,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3107f305-502f-4257-9dfc-3ff6dce7f2a9",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "55a6708e-ab6f-46d5-a182-5623cf5da0f6",
          "title": "Add Category",
          "fullFile": "C:\\Users\\RYZEN 5\\Karir\\Belajar\\Sanber\\QA Automation\\Pekanan 4 API Automation\\suites\\TestCategories.js",
          "file": "\\suites\\TestCategories.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Add Category\"",
              "fullTitle": "Add Category \"before all\" hook in \"Add Category\"",
              "timedOut": false,
              "duration": 585,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginResponse = await login(dataLogin);\naccessToken = loginResponse.body.data.accessToken;",
              "err": {},
              "uuid": "01637a99-af7f-419d-af6a-c130e60be4b0",
              "parentUUID": "55a6708e-ab6f-46d5-a182-5623cf5da0f6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "status 201",
              "fullTitle": "Add Category status 201",
              "timedOut": false,
              "duration": 325,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "response = await createCategory(dataCategories, accessToken);\n expect(response.status).to.equal(201);\n categoryId = response.body.data.categoryId;",
              "err": {},
              "uuid": "b3f42aec-197d-4933-b9e8-7cb2ad2f02b1",
              "parentUUID": "55a6708e-ab6f-46d5-a182-5623cf5da0f6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Status success",
              "fullTitle": "Add Category Status success",
              "timedOut": false,
              "duration": 191,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "response = await createCategory(dataCategories, accessToken);\nexpect(response.body).to.have.property('status').to.equal('success');",
              "err": {},
              "uuid": "45dd97d4-7346-41d4-8bc2-eec761b04c02",
              "parentUUID": "55a6708e-ab6f-46d5-a182-5623cf5da0f6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "contain teks Customer berhasil ditambahkan",
              "fullTitle": "Add Category contain teks Customer berhasil ditambahkan",
              "timedOut": false,
              "duration": 1716,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "response = await createCategory(dataCategories, accessToken);  \nexpect(response.body).to.have.property('message').to.equal('Category berhasil ditambahkan');",
              "err": {},
              "uuid": "79a22d4b-ddef-4d48-b676-0d094b613fd7",
              "parentUUID": "55a6708e-ab6f-46d5-a182-5623cf5da0f6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b3f42aec-197d-4933-b9e8-7cb2ad2f02b1",
            "45dd97d4-7346-41d4-8bc2-eec761b04c02",
            "79a22d4b-ddef-4d48-b676-0d094b613fd7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2232,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "8c40a607-6781-4fb3-b44e-4de4ff7e6bd3",
          "title": "Negative Case - Create Category",
          "fullFile": "C:\\Users\\RYZEN 5\\Karir\\Belajar\\Sanber\\QA Automation\\Pekanan 4 API Automation\\suites\\TestCategories.js",
          "file": "\\suites\\TestCategories.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Display invalid data",
              "fullTitle": "Negative Case - Create Category Display invalid data",
              "timedOut": false,
              "duration": 415,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidCategory = {}; \nconst response = await createCategory(invalidCategory, accessToken);\nexpect(response.status).to.equal(400);",
              "err": {},
              "uuid": "bc957fe3-2964-4d43-a7d8-5b8797ef8c82",
              "parentUUID": "8c40a607-6781-4fb3-b44e-4de4ff7e6bd3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bc957fe3-2964-4d43-a7d8-5b8797ef8c82"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 415,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "ae5e6562-6f23-4959-a93d-01c030e1c93f",
          "title": "Select Single Category",
          "fullFile": "C:\\Users\\RYZEN 5\\Karir\\Belajar\\Sanber\\QA Automation\\Pekanan 4 API Automation\\suites\\TestCategories.js",
          "file": "\\suites\\TestCategories.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should retrieve the single category",
              "fullTitle": "Select Single Category should retrieve the single category",
              "timedOut": false,
              "duration": 948,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const selectCategoryResponse = await getCategory(categoryId, accessToken);\nexpect(selectCategoryResponse.status).to.equal(200);",
              "err": {},
              "uuid": "b3aeee1f-aba7-4072-bcb8-87fd145642ac",
              "parentUUID": "ae5e6562-6f23-4959-a93d-01c030e1c93f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b3aeee1f-aba7-4072-bcb8-87fd145642ac"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 948,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "0aa53691-408c-458f-97fa-5041950263b5",
          "title": "Select Single Category (Negative Tests)",
          "fullFile": "C:\\Users\\RYZEN 5\\Karir\\Belajar\\Sanber\\QA Automation\\Pekanan 4 API Automation\\suites\\TestCategories.js",
          "file": "\\suites\\TestCategories.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should handle non-existent category",
              "fullTitle": "Select Single Category (Negative Tests) should handle non-existent category",
              "timedOut": false,
              "duration": 1525,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nonExistentCategoryId = 'non_existent_category_id';\nconst response = await getCategory(nonExistentCategoryId, accessToken);\nexpect(response.status).to.equal(404);",
              "err": {},
              "uuid": "d0580d7b-47f7-4332-b051-49574164e2a9",
              "parentUUID": "0aa53691-408c-458f-97fa-5041950263b5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d0580d7b-47f7-4332-b051-49574164e2a9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1525,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "51d3a049-6f4e-4e56-8367-7b0cc67fc7e4",
          "title": "Update Category",
          "fullFile": "C:\\Users\\RYZEN 5\\Karir\\Belajar\\Sanber\\QA Automation\\Pekanan 4 API Automation\\suites\\TestCategories.js",
          "file": "\\suites\\TestCategories.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should update the created category",
              "fullTitle": "Update Category should update the created category",
              "timedOut": false,
              "duration": 1976,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await updateCategory(categoryId, accessToken, updateCategories);\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('status').to.equal('success');\nexpect(response.body.data).to.have.property('name').to.equal(updateCategories.name);",
              "err": {},
              "uuid": "775fad1c-456d-489e-ae5c-48bc62c3c50c",
              "parentUUID": "51d3a049-6f4e-4e56-8367-7b0cc67fc7e4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "775fad1c-456d-489e-ae5c-48bc62c3c50c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1976,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "8aea60f0-549f-4a1d-8fde-560c6e03b8dd",
          "title": "Update Category (Negative Tests)",
          "fullFile": "C:\\Users\\RYZEN 5\\Karir\\Belajar\\Sanber\\QA Automation\\Pekanan 4 API Automation\\suites\\TestCategories.js",
          "file": "\\suites\\TestCategories.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should handle invalid update data",
              "fullTitle": "Update Category (Negative Tests) should handle invalid update data",
              "timedOut": false,
              "duration": 156,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidupdateCategories = {}; \nconst response = await updateCategory(categoryId, accessToken, invalidupdateCategories);\nexpect(response.status).to.equal(400);",
              "err": {},
              "uuid": "4a0a8dc9-e09e-4235-ae38-2a97439c71be",
              "parentUUID": "8aea60f0-549f-4a1d-8fde-560c6e03b8dd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4a0a8dc9-e09e-4235-ae38-2a97439c71be"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 156,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "1f29f977-b167-4cf2-9f2b-b7cc49a58bee",
          "title": "Delete Category",
          "fullFile": "C:\\Users\\RYZEN 5\\Karir\\Belajar\\Sanber\\QA Automation\\Pekanan 4 API Automation\\suites\\TestCategories.js",
          "file": "\\suites\\TestCategories.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should delete the created category",
              "fullTitle": "Delete Category should delete the created category",
              "timedOut": false,
              "duration": 215,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await deleteCategory(categoryId, accessToken);\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('status').to.equal('success');\nexpect(response.body).to.have.property('data').to.deep.equal({});",
              "err": {},
              "uuid": "7e1598f3-4ab8-408d-9791-10203afeaeea",
              "parentUUID": "1f29f977-b167-4cf2-9f2b-b7cc49a58bee",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7e1598f3-4ab8-408d-9791-10203afeaeea"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 215,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "8a77ad9d-7bdb-4db8-a45a-16e1e7a44ea9",
          "title": "Delete Category (Negative Tests)",
          "fullFile": "C:\\Users\\RYZEN 5\\Karir\\Belajar\\Sanber\\QA Automation\\Pekanan 4 API Automation\\suites\\TestCategories.js",
          "file": "\\suites\\TestCategories.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should handle non-existent category for deletion",
              "fullTitle": "Delete Category (Negative Tests) should handle non-existent category for deletion",
              "timedOut": false,
              "duration": 3440,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nonExistentCategoryId = 'non_existent_customer_id';\nconst response = await deleteCategory(nonExistentCategoryId, accessToken);\nexpect(response.status).to.equal(404);",
              "err": {},
              "uuid": "92d1d43d-f8a1-44bf-aed0-19e2b43138c9",
              "parentUUID": "8a77ad9d-7bdb-4db8-a45a-16e1e7a44ea9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "92d1d43d-f8a1-44bf-aed0-19e2b43138c9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3440,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}